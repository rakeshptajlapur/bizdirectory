"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import ssl

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env at project root
load_dotenv(os.path.join(BASE_DIR, '.env'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-9x5vlq=rqgfc)xe&g!6-#6x5e@5ii2t*-8&ea=r$7)ewbwxq_o')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'

# Force HTTP for local development
if DEBUG:
    # Completely disable all HTTPS/SSL for local development
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0
    SECURE_HSTS_INCLUDE_SUBDOMAINS = False
    SECURE_HSTS_PRELOAD = False
    SECURE_CONTENT_TYPE_NOSNIFF = False
    SECURE_BROWSER_XSS_FILTER = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    USE_TLS = False
    
    # Force HTTP URLs
    ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'http'
    
    # Local CSRF trusted origins - HTTP only
    CSRF_TRUSTED_ORIGINS = [
        'http://127.0.0.1:8000',
        'http://localhost:8000',
    ]
    
    # Override any production settings
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'testserver']

# Improved ALLOWED_HOSTS handling
allowed_hosts_str = os.getenv('ALLOWED_HOSTS', '')
ALLOWED_HOSTS = [host for host in allowed_hosts_str.split(',') if host.strip()]


# CSRF Trusted Origins - domains that can submit forms to your site
CSRF_TRUSTED_ORIGINS = []

if DEBUG:
    # Local development - HTTP only
    CSRF_TRUSTED_ORIGINS = [
        'http://127.0.0.1:8000',
        'http://localhost:8000',
    ]
else:
    # Production - HTTPS
    # Add all allowed hosts with https:// prefix to CSRF_TRUSTED_ORIGINS
    for host in ALLOWED_HOSTS:
        if host and not host.startswith('.') and not host.startswith('*'):
            CSRF_TRUSTED_ORIGINS.append(f'https://{host}')
        elif host and host.startswith('.'):
            CSRF_TRUSTED_ORIGINS.append(f'https://*{host}')
            CSRF_TRUSTED_ORIGINS.append(f'http://*{host}')

# Application definition

INSTALLED_APPS = [
    # ACCOUNTS MUST BE FIRST for template precedence
    'accounts',
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for allauth
    
    # Allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    
    # Other apps
    'directory',
    'affiliate',
    # ...
]

MIDDLEWARE = [
    # Comment out SecurityMiddleware for local development
    # 'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'debug': True,  # Enable template debugging
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


# Use PostgreSQL in production, SQLite in development
if os.getenv('DATABASE_URL'):
    # For production with DATABASE_URL
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.config(default=os.getenv('DATABASE_URL'))
    }
else:
    # For development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv('DB_NAME', 'bizdirectory'),
            'USER': os.getenv('DB_USER', 'postgres'),
            'PASSWORD': os.getenv('DB_PASSWORD', ''),
            'HOST': os.getenv('DB_HOST', 'localhost'),
            'PORT': os.getenv('DB_PORT', '5432'),
        }
    }







# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Add whitenoise middleware for static files
# MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Message tags for Bootstrap alert classes
from django.contrib.messages import constants as messages
MESSAGE_TAGS = {
    messages.ERROR: 'danger',
    messages.WARNING: 'warning',
    messages.SUCCESS: 'success',
    messages.INFO: 'info',
}

# Email settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # FORCE SMTP
EMAIL_HOST = 'smtp.findnearbiz.com'  # Your actual SMTP server
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'support@findnearbiz.com')

# Allauth configuration
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = "username_email"
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_UNIQUE_EMAIL = True

# Specify custom forms in standard location
ACCOUNT_FORMS = {
    'signup': 'accounts.forms.AllauthSignupForm',
}

# Admin email addresses for notifications
ADMIN_EMAILS = os.getenv('ADMIN_EMAILS', '').split(',')
ADMINS = [(None, email) for email in ADMIN_EMAILS if email]

# Celery/Redis configuration from .env
CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('REDIS_URL', 'redis://localhost:6379/0')

# Celery Performance Optimization
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True

# Email task priority
CELERY_TASK_DEFAULT_PRIORITY = 5
CELERY_WORKER_DISABLE_RATE_LIMITS = True

# Connection pooling for faster email sending
EMAIL_TIMEOUT = 10
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# FIX: Use consistent result backend
CELERY_RESULT_BACKEND = CELERY_BROKER_URL

# FIX: Use consistent queue names
CELERY_TASK_ROUTES = {
    'accounts.signals.*': {'queue': 'emails'},
    'directory.signals.*': {'queue': 'emails'},
}

# Performance settings
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_TASK_ACKS_LATE = True
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# Connection timeout settings
CELERY_BROKER_CONNECTION_TIMEOUT = 30
CELERY_BROKER_CONNECTION_MAX_RETRIES = 3
CELERY_BROKER_CONNECTION_RETRY = True
CELERY_RESULT_EXPIRES = 3600

# Security settings for production ONLY
if not DEBUG and ('DYNO' in os.environ or 'PORT' in os.environ):
    # HTTPS settings for production only
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True

# Static files configuration for App Platform
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# Don't require database for collectstatic
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# For DigitalOcean App Platform
if 'DYNO' in os.environ or 'PORT' in os.environ:
    # Production settings
    DEBUG = False
    ALLOWED_HOSTS.extend(['.ondigitalocean.app', '.appspec.app'])

# Session settings for OTP verification
SESSION_COOKIE_AGE = 7200  # 2 hours instead of 30 minutes
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = True  # Keep session alive with activity

# OTP timeout - INCREASED 
OTP_VERIFICATION_TIMEOUT = 1800  # 30 minutes instead of 10 minutes

# Add testserver for Django testing (don't disturb production hosts)
if DEBUG:
    if 'testserver' not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append('testserver')

# Allauth configuration - IMPORTANT
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = "email"  # Use email for login instead of username
ACCOUNT_USERNAME_REQUIRED = False  # Since we're generating it from email
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGOUT_ON_GET = False
ACCOUNT_LOGIN_ON_PASSWORD_RESET = True
ACCOUNT_EMAIL_SUBJECT_PREFIX = 'BizDirectory - '

# Login/signup redirect URLs
LOGIN_REDIRECT_URL = '/dashboard/'
ACCOUNT_SIGNUP_REDIRECT_URL = '/accounts/confirm-email/'
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/accounts/login/'

# Custom forms
ACCOUNT_FORMS = {
    'signup': 'accounts.forms.AllauthSignupForm',
}

# Custom URLs - Required to point to our existing URLs
ACCOUNT_LOGIN_URL = '/accounts/login/'
ACCOUNT_LOGOUT_URL = '/accounts/logout/'
ACCOUNT_SIGNUP_URL = '/accounts/signup/'

# Force allauth to use your custom adapter with Celery
# ACCOUNT_ADAPTER = 'accounts.adapter.CustomAccountAdapter'

# Force template directories  
import os
TEMPLATES[0]['DIRS'] = [
    os.path.join(BASE_DIR, 'accounts', 'templates'),
]

# Add this to your INSTALLED_APPS if not already there
INSTALLED_APPS = [
    # Place accounts first for template precedence
    'accounts',
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',  # Required for allauth
    
    # Allauth apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    
    # Other apps
    'directory',
    'affiliate',
    # ...
]

# Add these settings for allauth
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1  # Required for allauth

# Add these to your existing settings:

# More verbose logging to debug email issues
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
        'accounts.adapter': {
            'handlers': ['console'],
            'level': 'DEBUG',
        },
    },
}

# Check your current config/settings.py - make sure these are NOT present:
# DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
# AWS_ACCESS_KEY_ID = ...
# AWS_SECRET_ACCESS_KEY = ...

# Make sure you have standard Django file handling:
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
